/** 
 * Card -- models playing cards
 *       It has 2 public enums: one for the suit, one for the rank
 * 
 *       It has a framework for handling mouse events.
 *       It can keep track of the CardGroup it belongs to.
 *       
 * 
 *    mlb
 * 10/01/10 rdb modified to support either Ace HIGH or ACE low
 */

import java.awt.geom.*;
import java.awt.*;
import java.awt.image.*;
import javax.swing.*;
import java.io.*;
import javax.imageio.*;
import java.awt.event.*;
import java.util.*;

public class Card extends JLabel implements Comparable<Card>, MouseListener
{
   //-------------------------- class variables -------------------------------
   private static BufferedImage backImage = null;
   public static final int width = 71, height = 96;
   // The arrays below givesa short character representation for the card's rank
   // Uncomment whichever is correct for your application.
   //
   //  This treats Ace as a HIGH card
   private static String[] _rankString = { "2", "3", "4", "5", "6", "7",
                                           "8","9", "10", "J", "Q", "K", "A" };
   
   //  This treats Ace as a LOW card
   //private static String[] _rankString = { "A", "2", "3", "4", "5", "6", "7",
   //                                        "8","9", "10", "J", "Q", "K" };
     
   private static final String CARD_DIR = "cards_gif/";
   
    ////////////////////////////////////////////////////////////////////////
    /**
    * An "enum" is a special Java construct that allows you to provide
    * symbolic names for integer values without knowing or caring exactly
    * what the integer value is. It is simpler than a bunch of declarations
    * such as:
     
    public static final CLUBS = 0;
    public static final DIAMONDS = 1;
       etc.
    *
    * Java does an automatic conversion of the symbolic value to a 
    * String on output.
    * 
    * You can access the "ordinal" value of an enum element using the
    * "ordinal()" method as shown below in the "shortRankString" method
    * 
    * Since these enums are defined as public inside the public class,
    * Card, the enum can be accessed outside of this class with Card.Suit,
    * and the values with
    *      Card.Suit.CLUBS, Card.Suit.HEARTS, etc.
    */  
    //  symbolic names for the 4 suits
    public static enum Suit  { CLUBS, DIAMONDS, HEARTS, SPADES }

    
   //------------------- Rank -------------------------------
   ///////////////////////////////////////////////////////
   // Task 1b
   //////////
   // Using the Suit enum above as a model, define a list of identifiers 
   //   to represent the 13 cards: 
   // If you want Ace HIGH, you want the order to be:
   //      2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace
   // If you want Ace LOW, you want the order to be:
   //      Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King
   //
   // You cannot use numbers in an enum, so the 13 identifiers
   // for the cards must all use words. By convention, we use
   // fully capitalized words
   ///////////////////////////////////////////////////////
    
   // symbolic names for the 13 cards   
   public static enum Rank { 
      
   }   

   //-------------------------- instance variables -----------------------------   
   private int rank = 0;
   private Suit suit = null;
   private BufferedImage faceImage;
   private CardGroup sRef;
   private boolean _faceUp = false;
   private JPanel _parent;
   
        
   //------------------------ Constructor ---------------------------------
   public Card( JPanel frame, int r, Suit s )
   {
      rank = r;
      suit = s;
      this.setSize( width, height );
      _parent = frame;
      
      addMouseListener( this );
      if ( backImage == null ) // only read the backImage once
         getBackImage();
      getFaceImage();      
   }
   
   //---------------------- getFaceImage -------------------------------
   /**
    * Get the appropriate images to represent the front and backs of the cards
    * The file names for clubs are:
    *     c1.gif == ace
    *     c2.gif == 2
    *     c3.gif == 3
    *      ...
    *     c10.gif == 10
    *     c11.gif == jack
    *     c12.gif == queen
    *     c13.gif == king
    *     c14.gif == ace
    * The other suits are the same except the first letter is d or h or s.
    */ 
   public void getFaceImage(  )
   {
      String fileName = "";
      
      ////////////////////////////////////////////////////////////////
      // Step 1h. Construct the string name of the correct image file
      // -------------------------------------------------------------
      // The image files have names such as "d1" for the ace of
      // diamonds and c12 for the queen of clubs. You need to build
      // the name based on the suit and the ordinal of the rank
      //  (rank.ordinal()). The filenames end in ".gif"
      // 
      // 1. add the suit part of the file name
      // -----------
      // use a switch of the form...
      //     switch ( this.suit ) 
      //     {
      //       case CLUBS:
      //         fileName += "c";
      //         break;
      //       case DIAMONDS:
      //         etc... 
      //  
      /////////////////////////////////////////////////////////////////
      
      
      
      ///////////////////////////////////////////////////////////////
      // 2. append the rank part to the filename
      // -----------
      // If you want Ace to be LOW
      //    the filename rank is rank.ordinal() + 1
      // If you want Ace to be HIGH
      //    the filename rank is rank.ordinal() + 2 
      //
      // you must put the expression in parenthesis so the integer
      // summation is done before Java converts the int to a string
      // in order to concatenate it with the fileName String variable value
      //
      // Statement is of the form 
      //
      //  fileName += ( rank expression )
      //////////////////////////////////////////////////////////////
      
      
      
      /////////////////////////////////////////////////////////////
      // append ".gif" to the file name
      /////////////////////////////////////////////////////////////
      
      
      
      System.out.println( "Image file name: " + fileName );
      try 
      {
         if ( fileName.length() == 0 )
            fileName = "rj.gif"; // default name gets a joker
         ///////////////////////////////////////////////////////////////////
         // Once you have the filename built
         // get the face image 
         ///////////////////////////////////////////////////////////////////
         
         faceImage = ImageIO.read( new File( CARD_DIR + fileName ));
         
      } 
      catch ( Exception e ) 
      { 
         System.err.println( "Card face image error: " +  e.getMessage() ); 
      }    
   }
      
   //---------------------- getBackImage -------------------------------
   /**
    * Get the back image for all cards; you can choose blue or red backs!
    */ 
   public void getBackImage(  )
   {
      String backImageFile = "b1fv.gif";  // blue back
      //String backImageFile = "b2fv.gif";  // red back
      try 
      {
         backImage = ImageIO.read( new File( CARD_DIR + backImageFile ));
      } 
      catch ( Exception e ) 
      { 
         System.err.println( "Card back image error: " +  e.getMessage() ); 
      }    
   }
   //--------------------- setFaceUp( boolean ) --------------------
   /**
    * set the face up status of the card
    */ 
   public void setFaceUp( boolean b )
   {
      _faceUp = b;   
   }   
   //----------------------- getSuit() -------------------------
   /**
    * return the suit of this card
    */ 
   public Suit getSuit() 
   {
      return this.suit;
   }  
   //--------------------- getRank ------------------------------
   /**
    * return the rank of this card
    */ 
   public int getRank() 
   {
      return rank;
   }   
   //--------------------- setCurStack ------------------------
   /**
    * set the stack containing this card
    */ 
   public void setCurStack( CardGroup s ) 
   {
      this.sRef = s;
   }
   
   //--------------------- getCurStack ------------------------
   /**
    * return a reference to the CardGroup containing this card
    */ 
   public CardGroup getCurStack() 
   {
      return this.sRef;
   }
   
   //-------------------- paintComponent ------------------------
   /**
    * paintComponent draws the card as either face up or face down
    */ 
   public void paintComponent( java.awt.Graphics brush )
   {
      super.paintComponent( brush ); 
      Graphics2D brush2 = (Graphics2D) brush;
      if ( _faceUp )
         brush2.drawImage( faceImage, 0, 0, null );
      else
         brush2.drawImage( backImage, 0, 0, null );
   }
   
   //--------------------- mouseClicked --------------------------
   /**
    * mouseClicked -- unused
    */ 
   public void mouseClicked( MouseEvent e ) 
   {
      System.out.println( "Card Clicked - " + this );      
   }
   
   //----------------------------------------------------------
   /**
    * Unimplemented  mouse methods
    */ 
   public void mousePressed( MouseEvent e ) { }
   public void mouseReleased( MouseEvent e ) {}
   public void mouseEntered( MouseEvent e ) {}
   public void mouseExited( MouseEvent e ) {}
   
   //--------------------- compareTo ------------------------------
   /**
    * compareTo uses the Rank as the major comparison, the Suit
    * as a secondary one.
    */ 
   public int compareTo( Card o ) 
   {
      if ( this.rank == o.rank )
         return this.suit.ordinal() - o.suit.ordinal();
      else
         //return this.rank.ordinal() - o.rank.ordinal();
         return this.rank - o.rank;
   }  
   
   //----------------------- equals ---------------------------
   /**
    * equals uses the Rank and Suit components
    */ 
   public boolean equals( Card o )
   {
      return compareTo( o ) == 0;
   }
   
   //-------------------------- toString -------------------------
   /**
    * toString()
    */ 
   public String toString() 
   {
      return _rankString[rank] + " of " + suit;
   }
   
   //------------------- main unit test ---------------------------------
   public static void main( String[] args )
   {
      //////////////////////////////////////////////////////
      // Edit test constructors to use Rank enum constants
      //////////////////////////////////////////////////////
      int rank;
      Suit suit;
      // Create Heart Card with rank, 8:
      //     8 is a 10 if Ace is High
      //     8 is a 9 if Ace is Low
      rank = 8;
      suit = Suit.HEARTS;
      
      Card c1 = new Card( null, rank, suit );
      System.out.println( rank + ", " + suit +  " --- " + c1 );
      c1.setFaceUp( true );
      
      // Create a Space Card with rank 12,
      //     11 is either a Queen or King
      rank = 11;
      suit = Suit.SPADES;
      
      Card c2 = new Card( null,  rank, suit ); 
      System.out.println( rank + ", " + suit +  " --- " + c2 );
      c2.setFaceUp( true );
      /****/
      
      //------ graphical test -------------------
      JFrame f = new JFrame();
      f.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
      f.setLayout( null );
      
      c1.setLocation( 50, 50 );
      f.add( c1 );
      c2.setLocation( 200, 50 );
      f.add( c2 );
      
      f.setSize( 600, 200 );
      f.setVisible( true );      
   }   
}
