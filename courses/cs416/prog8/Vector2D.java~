//package FlowQuad;

import java.awt.geom.Point2D;
import java.awt.*;

public class Vector2D extends Point2D.Float
{
   //------------------- class variables ----------------------------
   public static boolean showEnd  = true;
   public static boolean dualTone = true;
   
   //------------------- instance variables -------------------------
   //private 
   //--------------------- constructor -------------------------------
   public Vector2D( float xMag, float yMag ) 
   {
      super( xMag, yMag ) ;
   }
   //------------------------ getAngle() ----------------------------
   /**
    * return the angle with the horizontal made by the vector
    */
   public double getAngle() 
   {
      double cos = x / Math.sqrt( x * x + y * y );
      if ( cos < -1 )
         cos = -1;
      else if ( cos > 1 )
         cos = 1;
         
      double value = Math.acos( cos );
      if ( y < 0 )
         value += Math.PI;
      return value;
   }
   
   //---------------------- drawLine( Graphics ) --------------------------
   /**
    * Draw the vector as a line; use this option for particles.
    */
   public void drawLine( Graphics g, double x, double y, 
                    Color color, double vecScale )
   {
      draw( g, x, y, color, vecScale, true );
   }
   //------------------ draw( Graphics, ...  ) --------------------------
   /**
    * Draw the vector. 3 choices. single line, 2-color line, circle at end
    *        All can be done.
    */
   public void draw( Graphics g, double x, double y, 
                     Color color, double vecScale )
   {
      draw( g, x, y, color, vecScale, false );
   }
   //------------------- draw( Graphics, ...., boolean ) -----------------
   /**
    * Do the actual work in this private method, so we can share the code
    */
   private void draw( Graphics g, double x, double y, 
                     Color color, double vecScale, boolean lineOnly )
   {
      int    dScale = VectorField.displayScale;
      double vScale = dScale * VectorField.vectorScale;

      double x1 = x * dScale;
      double y1 = y * dScale;
      double dx = ( getX() * vScale );  
      double dy = - ( getY() * vScale ); // - because y goes DOWN in display
      g.setColor( color );
      g.drawLine( (int) x1 , (int) y1, (int)( x1 + dx ), (int)( y1 + dy ));
      
      if ( lineOnly )
         return;
      //-----------------
      if ( showEnd ) // draw oval at arrowhead
         g.drawOval( (int)( x1 + dx - 1 ), (int)( y1 + dy - 1 ), 2, 2 );
      if ( dualTone )  // twoColor line
      {
         // draw a second line only 1/2 as long as first
         g.setColor( Color.LIGHT_GRAY );
         g.drawLine( (int)x1, (int)y1, 
                    (int)( x1 + dx / 2 ), (int)( y1 + dy / 2 ));
      }
   }
}
