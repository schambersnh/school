/**
 * The BiNode class represents a node in a spatial binary tree
 * Each node corresponds to a range of a one-dimensional space
 * defined by bounds passed to the constructor. If the node has
 * children, they split this range into two parts -- not necessarily 
 * of equal size.
 * 
 * @author rdb 4/8/09
 * Last edited: 8/24/10
 */
import java.util.*;

public class BiNode
{
  //-------------- instance variables ---------------------------
  public Data data;
  
  private ArrayList<Integer> _values;
  private int                _floor;
  private int                _ceil;
  
  private int   _size;    // number points in this region
  private int   _splitVal;   // if have children, this is the split value
  public BiNode _left;
  public BiNode _right;
  public BiNode _parent;
  
  //--------------- constructor --------------------------------
  /**
   * This node stores all 1D points, p in the range:
   * [ floor, ceiling ), which means that floor <= p < ceiling.
   */
  public BiNode( int floor, int ceil )
  {
    _floor = floor;
    _ceil = ceil;
    _left = _right = null;
    _parent = null;
    _values = new ArrayList<Integer>();
    data = new Data( "[" + floor + "," + ceil + "]", "", 0 );
    
    //////////////////////////////////////////////////////
    // initialize parent field
    //////////////////////////////////////////////////////
  }
  //-------------------- updateData() ------------------------------------
  private void updateData()
  {
    data.values = toString( _values );
    data.count = _values.size();
    
    if(this._left == null && this._right == null)
    {
      return;
    }
    else if(this._left != null)
    {
      data.count = this._left.data.count + this._right.data.count;
    }
    
    /////////////////////////////////////////////////////////////
    // Add code here to fill in the data.count field with
    // the sum of the counts of the children of the node if this
    // is not a leaf node. You can use the size method.
    ///////////////////////////////////////////////////////////
    
  }
  //------------------ findPoints( int, int, ArrayList ) ----------------
  /**
   * If there are any points in this node that fall into the specified range,
   * add them to the ArrayList.
   */
  public void findPoints( int min, int max, ArrayList<Integer> found )
  {
    //System.out.println( "findPoints: " + dataToString());
    if(intersects(min, max))
    {
      if(this._left!= null)
      {
        findPoints(min, max, this._left._values);
        findPoints(min, max, this._right._values);
      }
      else
      {
        for(int i = 0; i < _values.size(); i++)
        {
          if(this._values.get(i) > min || this._values.get(i) < max)
          {
            found.add(_values.get(i));
          }
        }
        
      }
    }
      
      /////////////////////////////////////////////////////////////////
      // Add code here to check the  values in this node's _values to see
      // if they fall within the min/max parameters passed. If they are in
      // specified range, they should be copied into the ArrayList that is
      // passed in. 
      // If the node has children their findPoints methods should be called
      // to add their data to the found array. Note that if a node has children,
      // it shouldn't have any values in the _values array.
      //
      // There is a handy utility method you might want to use:
      //    intersects( min, max ) returns true if the range (min, max) 
      //    overlaps with this node's minimum and maximum values.
      //
      //////////////////////////////////////////////////////////////////
    }   
    
    //--------------------- split ------------------------------
    /**
     * Split the values in this node into two children:
     *     val < splitValue go into left child
     *     val >= split value go into right child
     */
    public void split( int splitValue )
    {
      if ( splitValue <= _floor || splitValue > _ceil )
        return;   // do nothing if split value is not valid
      
      _splitVal = splitValue;
      _left = new BiNode( _floor, splitValue );
      _right = new BiNode( splitValue, _ceil );
      ////////////////////////////////////////////////////
      // set parent fields
      ////////////////////////////////////////////////////
      this._left._parent = this;
      this._right._parent = this;
      
      
      // copy values into left or right nodes based on split value
      for ( Integer val: _values )
      {
        if ( val < splitValue )
          _left.add( val );
        else
          _right.add( val );
      }
      _values.clear();
      updateData();
    }
    //------------------------ add( int ) ------------------------
    /**
     * add a floating point location to the tree
     */
    public void add( int val )
    {
      _size++;
      if ( val < _floor || val >= _ceil )
      {
        System.err.println( "Can't add: " + val 
                             + " to node range: [ " 
                             + _floor + ", " + _ceil + " )" );
        _size--;
      }
      else if ( _left == null )
        _values.add( new Integer( val ));
      else if ( val < _splitVal )
        _left.add( val );
      else 
        _right.add( val );
      updateData();
    }
    
    //------------------ findLeaf( int ) -----------------------
    /**
     * Find the node in the tree where the point should be located
     */
    public BiNode findLeaf( int value )
    {
      if ( !valueInRange( value ))
        return null;
      if ( _left == null )
        return this;
      else 
      {
        BiNode node = _left.findLeaf( value );
        if ( node != null )
          return node;
        else
          return _right.findLeaf( value );
      }         
    }
    
    //------------- intersects( int, int ) ---------------
    private boolean intersects( int min, int max )
    {
      return ( min <= _ceil && max >= _floor );
    }
    //------------- valueInRange( int ) ---------------
    private boolean valueInRange( int val )
    {
      return ( val >= _floor && val < _ceil );
    }
    
    //-------------------------- getValues() -----------------------
    public ArrayList<Integer> getValues()
    {
      if ( _left == null )
        return _values;
      else
      {
        ArrayList<Integer> all = new ArrayList<Integer>();
        findPoints( _floor, _ceil, all );
        return all;
      }
    }
    //-------------------------- toString() -------------------------
    /**
     * Generate a string representation of the tree.
     */
    public String toString()
    {
      return toString( this, "  ", "  " ) ;        
    }
    
    /**
     * recursively generate a string representation for a Node of a tree.
     * indent is increased for increasing depth.
     * branch is a short character string that prefixes each node indicating
     *        whether this node is a left (L) or right (R) child of its parent.
     */
    private String toString( BiNode n, String indent, String branch )
    {
      String s = "";
      if ( n != null )
      {
        String prefix = indent.substring( 0, indent.length() - 2 ) + branch;
        s += prefix + n.dataToString() + "\n";
        if ( n._left != null )
          s += toString( n._left, indent + "  ", "L " );
        if ( n._right != null )
          s += toString( n._right, indent + "  ", "R " );
      }
      return s;
    }
    public String dataToString()
    {      
      return "{" + _floor + "," + _ceil + "}: " + toString( _values );
    }
    //------------------------ height() ---------------------------
    /**
     * compute height of subtree.
     */
    public int height()
    {
      int lh = -1;
      int rh = -1;
      if ( _left != null )
        lh = _left.height();
      if ( _right != null )
        rh = _right.height();
      return 1 + Math.max( lh, rh );
    }
    //------------------------ size() ---------------------------
    /**
     * return # nodes in subtree
     */
    public int size()
    {
      return _size;
    }
    /****/   
    //++++++++++++++++++++++ class methods ++++++++++++++++++++++++
    //----------------------- toString --------------------------
    public static String toString( ArrayList<Integer> fa )
    {
      if ( fa.size() == 0 )
        return "[]";
      StringBuffer sb = new StringBuffer( "[" );;     
      for ( Integer f: fa )
        sb.append( f.intValue() + "," );
      sb.setCharAt( sb.length() - 1, ']' );
      return new String( sb );
    }
    //----------------------- printArray --------------------------
    private static void printArray( String title, ArrayList<Integer> fa )
    {
      System.out.println( "----------------" + title + "-------------------" );
      System.out.println( toString( fa ));  
      System.out.println( "----------------------------------------" );
    }
    //----------------------- main ---------------------------
    public static void main( String[] args )
    {
      BinTreeLab app = new BinTreeLab( "BiNode", args );
      /****
        int max = 99;
        BiNode root = new BiNode( 0, max );
        for ( int f = 0; f < max; f += 10.0 )
        root.add( f );
        System.out.println( root );
        
        root.split( 35 );
        System.out.println( root );
        
        root._right.split( 70 );
        System.out.println( root );
        
        ArrayList<Integer> search = new ArrayList<Integer>();
        root.findPoints( 30, 70, search );
        printArray( "find 30,70", search );
        /*******************************/
      
    }
  }
